from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import MessageToDeleteNotFound
from loader import dp
from loguru import logger
import time

from parse import scrap_links, all_items
from states import Category
from keyboard import collection_keyboard, type_jewellery_keyboard


@logger.catch
@dp.message_handler(Command('catalog'))
async def choose_collection(message: Message) -> None:
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —é–≤–µ–ª–∏—Ä–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    keyboard = await collection_keyboard()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', reply_markup=keyboard)
    await Category.collection.set()


@logger.catch
@dp.callback_query_handler(state=Category.collection)
async def choose_type_jewellery(callback: CallbackQuery, state: FSMContext) -> None:
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫—Ä–∞—à–µ–Ω–∏–π"""
    if callback.data == 'stop':
        await state.reset_state()
        await callback.message.delete()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: '
                                      '\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üíª'
                                      '\n/help - –ü–æ–º–æ—â—å üì£'
                                      '\n/catalog - –ö–∞—Ç–∞–ª–æ–≥ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π üìñ'
                                      '\n/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å ‚ÑπÔ∏è'
                                      '\n/delivery - –û–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ üíµ'
                                      '\n/contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∞–¥—Ä–µ—Å –Æ–≤–µ–ª–∏—Ä–Ω–æ–≥–æ –¥–æ–º–∞ üìû;'
                                      )

    else:
        await state.update_data(collection=callback.data)
        await callback.message.delete()
        data = await state.get_data()
        collection = data['collection']
        keyboard = await type_jewellery_keyboard(collection)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–∫—Ä–∞—à–µ–Ω–∏—è:', reply_markup=keyboard)
        await Category.jewellery.set()


@logger.catch
@dp.callback_query_handler(state=Category.jewellery)
async def choose_type_jewellery(callback: CallbackQuery, state: FSMContext) -> None:
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–≤–µ–ª–∏—Ä–Ω–æ–º –∏–∑–¥–µ–ª–∏–∏"""
    await callback.message.delete()
    if callback.data == 'back':
        try:
            keyboard = await collection_keyboard()
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', reply_markup=keyboard)
            await Category.collection.set()
        except MessageToDeleteNotFound as ex:
            logger.exception(ex)

    else:
        await state.update_data(jewellery=callback.data)
        data = await state.get_data()
        jewellery = data.get('jewellery')
        links = await scrap_links(jewellery)
        product_list = await all_items(links)
        if product_list:
            for product in product_list:
                if product:
                    img = product.get('img')
                    title = product.get('title')
                    price = product.get('price')
                    availability = product.get('availability')
                    description = product.get('description')
                    url = product.get('url')
                    await callback.message.bot.send_photo(photo=img, caption=f'{title} \n{price} \n{availability} \n'
                                                                             f'{description} \n{url}',
                                                          chat_id=callback.message.chat.id)
                    time.sleep(0.3)
        else:
            await callback.message.answer('–í —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–∫—Ä–∞—à–µ–Ω–∏—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏')

        await state.reset_state()
